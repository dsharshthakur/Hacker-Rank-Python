List Comprehension:


Q1)Let's learn about list comprehensions! You are given three integers  and  representing the dimensions of a cuboid along with an integer .
Print a list of all possible coordinates given by  on a 3D grid where the sum of  is not equal to n.

solution1 :
_____________

_x=[i for i in range(y+1)]
_y=[j for j in range(y+1)]
_z=[k for k in range(z+1)]
final=[]
    for i in _x:
        for j in _y:
            for k in _z:
                if (i+j+k) != n:
                    final.append([i,j,k])
    
print(final)


Solution 2:
_____________
_x=[i for i in range(x+1)]
_y=[j for j in range(y+1)]
_z=[k for k in range(z+1)]
final=[]
for i in _x:
  for j in _y:
    for k in _z:
      if (i+j+k) != n:
        final.append([i,j,k])
print(final)

SOlution 3:
_______________
import itertools

def result(x,y,z,n):
    _x=[i for i in range(x+1)]
    _y=[j for j in range(y+1)]
    _z=[k for k in range(x+1)]
    res=[list(c) for c in itertools.product(_x,_y,_z) if sum(c) != n ]
    return res
print(result(x,y,z,n))

Q2)
FINDING THE PERCENTAGE :
The provided code stub will read in a dictionary containing key/value pairs of name:[marks] for a list of students. 
Print the average of the marks array for the student name provided, showing 2 places after the decimal.

Solution :

for name in student_marks.keys():
    mrks=student_marks.get(name)
    avg_mrks=sum(mrks)/len(mrks)
    avg_dt[name]=f"{avg_mrks:.2f}" 
   
print(avg_dt[query_name])

Q3)
collections.namedtuple()
Basically, namedtuples are easy to create, lightweight object types.
They turn tuples into convenient containers for simple tasks.
With namedtuples, you donâ€™t have to use integer indices for accessing members of a tuple.

Solution:
from collections import namedtuple
total_st=int(input())
col_names=input().split()

st=namedtuple("student",col_names)
marks_col=col_names.index("MARKS")
all_marks=[]

for i in range(total_st):
    marks=input().split()[marks_col]
    all_marks.append(int(marks))
avg_marks=sum(all_marks)/len(all_marks)
print(f"{avg_marks:.2f}")


Q4)
Consider a list (list = []). You can perform the following commands:
insert i e: Insert integer  at position .
print: Print the list.
remove e: Delete the first occurrence of integer .
append e: Insert integer  at the end of the list.
sort: Sort the list.
pop: Pop the last element from the list.
reverse: Reverse the list.

Solution:
for i in range(N):
        task=input().split()
        task=[int(item) if item.isdigit() else item for item in task]
        if "insert" in task:
            l.insert(task[1],task[2])
        elif "print" in task:
            print(l)
        elif "remove" in task:
            l.remove(task[1])
        elif "append" in task:
            l.append(task[1])
        elif "sort" in task:
            l.sort()
        elif "pop" in task:
            l.pop()
        elif "reverse" in task:
            l.reverse()
        
            
if __name__ == '__main__':
    N = int(input())
    operation(N)

Q5)Given an integer, "n","n" and  space-separated integers as input, create a tuple,"t" , of those "n" integers. Then compute and print the result of hash(t).
Note: hash() is one of the functions in the __builtins__ module, so it need not be imported.

Solution:
if __name__ == '__main__':
    n = int(input())
    integer_list = map(int, input().split())
    print(hash(tuple(integer_list)))

Q6) SWAP CASE
You are given a string and your task is to swap cases. In other words, convert all lowercase letters to uppercase letters and vice versa.

Solution:

def swap_case(s):
    swapped=s.swapcase()
    return swapped

if __name__ == '__main__':
    s = input()
    result = swap_case(s)
    print(result)
    
    
Q7)STRING SPLIT AND JOIN

Solution:
def split_and_join(line):
    # write your code here
    result=line.split(sep=" ")
    return "-".join(result)

if __name__ == '__main__':
    line = input()
    result = split_and_join(line)
    print(result)

Q8) Whats your name ? 
You are given the firstname and lastname of a person on two different lines. Your task is to read them and print the following:
Hello firstname lastname! You just delved into python.

Solution:

def print_full_name(first, last):
    # Write your code here
    result = f"Hello {first} {last}! You just delved into python." 
    print(result) 

if __name__ == '__main__':
    first_name = input()
    last_name = input()
    print_full_name(first_name, last_name)

Q9)Mutations
We have seen that lists are mutable (they can be changed), and tuples are immutable (they cannot be changed).
Let's try to understand this with an example.
You are given an immutable string, and you want to make changes to it.

Solution 1:
def mutate_string(string, position, character):
    return string[:position] + character + string[position + 1:]
    
if __name__ == '__main__':
    s = input()
    i, c = input().split()
    s_new = mutate_string(s, int(i), c)
    print(s_new)

Solution 2:
ef mutate_string(string, position, character):
    l=list(string)
    l[position] = character
    return "".join(l)

if __name__ == '__main__':
    s = input()
    i, c = input().split()
    s_new = mutate_string(s, int(i), c)
    print(s_new)
